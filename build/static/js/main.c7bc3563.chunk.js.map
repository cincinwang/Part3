{"version":3,"sources":["services/notes.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Notification","message","content","className","success","Search","persons","showPerson","personList","map","a","name","showList","filter","b","toUpperCase","personIndex","indexOf","toString","c","number","Persons","person","handleDelete","onClick","App","useState","setPerson","newName","setNewName","newNumber","setNewNumber","setShowPerson","popMessage","setPopMessage","useEffect","nameBook","then","response","data","value","onChange","event","target","onSubmit","preventDefault","nameObject","find","changedNumber","window","confirm","p","setTimeout","console","log","catch","error","concat","includes","alert","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7bc3563.chunk.js","sourcesContent":["import axios from 'axios'\n// const baseUrl = 'http://localhost:3001/api/persons';\nconst baseUrl='/api/persons';\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n};\n\nconst create = (newObject)=>{\n    return axios.post(baseUrl, newObject)\n};\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n};\n\nconst deleteName = (id) =>{\n    return axios.delete(`${baseUrl}/${id}`)\n};\nexport default {getAll, create, update, deleteName}","import ReactDOM from 'react-dom';\nimport React, {useState, useEffect} from 'react';\nimport nameBook from \"./services/notes\";\nimport './index.css'\n\n\n\nconst Notification =({message}) =>{\n    if(message.content ===''){\n        return null\n    }\n    return(\n        <div className={message.success ? 'success':'fail'}>\n            {message.content}\n        </div>\n    )\n}\n\nconst Search = ({persons,showPerson})=>{\n\n        const personList = persons.map(a => a.name);\n        const showList = personList.filter(b => b.toUpperCase() === showPerson.toUpperCase());\n        const personIndex = personList.indexOf(showList.toString());\n\n        return (\n            <div>\n                {showList.map(c => <li>{c} {persons[personIndex].number}</li>)}\n            </div>\n        )\n\n    // const personList = persons.map(a => a.name);\n    // const showList = personList.filter(b => b.toUpperCase() === showPerson.toUpperCase());\n    // const personIndex = personList.indexOf(showList.toString());\n    //\n    // return (\n    //     <div>\n    //         {showList.map(c => <li>{c} {persons[personIndex].number}</li>)}\n    //     </div>\n    // )\n\n}\n\n\n// const Names = ({person}, handleDelete) =>{\n//\n//     return(\n//         <li key={person.id}>{person.name} {person.number} <button onClick={handleDelete(person.id)}>delete</button></li>\n//     )\n// };\n\nconst Persons = ({person,handleDelete}) =>{\n    return(\n        <ul>\n            {person.map((person) => <li key={person.id}>{person.name} {person.number} <button onClick={()=>handleDelete(person.name,person.id)}>delete</button></li>)}\n        </ul>\n    )\n};\n\n// const Filter = ({person}) =>{\n//\n//     const personList = person.map(a => a.name);\n//     const showList = personList.filter(b => b.toUpperCase() === showPerson.toUpperCase());\n//     const personIndex = personList.indexOf(showList.toString())\n//\n//     return(\n//         <div>\n//             {showList.map(c => <li>{c} {person[personIndex].number}</li>)}\n//         </div>\n//     )\n// }\n\n\nconst App = () => {\n    // const [persons, setPerson] = useState([\n    //     {name: 'Arto Hellas',\n    //      number: '1010101001'\n    //     },\n    //     {name: 'Lily', number:'03948930'},\n    //     {name:'Rose', number:'989830943'}\n    // ]);\n\n    const [persons, setPerson] = useState([])\n\n    const [newName, setNewName] = useState('');\n\n    const [newNumber, setNewNumber] = useState('');\n\n    const [showPerson, setShowPerson] = useState('');\n\n    const [popMessage, setPopMessage] = useState({content:'', success:null})\n\n\n    // const personList = persons.map(a => a.name);\n    // const showList = personList.filter(b => b.toUpperCase() === showPerson.toUpperCase());\n    // const personIndex = personList.indexOf(showList.toString());\n\n    // console.log(personList);\n    // console.log(showUpperCasePerson);\n\n    useEffect(()=>{\n        nameBook\n        .getAll('http://localhost:3001/persons').then(response => {\n            // console.log(response.data);\n            setPerson(response.data)\n        });\n        }\n    , []);\n\n    const addName = (event) =>{\n        event.preventDefault();\n        const nameObject ={\n            name: newName,\n            // id: persons.length +1,\n            number: newNumber\n        };\n\n        if(persons.find(person => person.name === newName)){\n            const person = persons.find(person => person.name === nameObject.name);\n            const changedNumber = {...person, number:newNumber};\n            // const person = persons.find(person => person.id === id)\n            if(window.confirm(`${nameObject.name} is already added to phonebook, replace the old number with a new one? `)){\n                nameBook\n                    .update(person.id,changedNumber)\n                    .then(response => {\n                        setPerson(persons.map(p => p.id !== person.id ? p : response.data));\n                        setNewName('')\n                        setNewNumber('')\n                        setPopMessage({content:`${person.name}'s number is updated`,success:true}\n\n                        )\n                        setTimeout(()=>{\n                            setPopMessage({content:'', success:null})\n                        }, 4000)\n                    console.log(response.data)\n                    console.log(persons)\n                    })\n                    .catch(error =>{\n                        setPopMessage({content:`Information of ${person.name} has already been removed from the server`, success:false})\n                        setTimeout(()=>{\n                            setPopMessage({content:'', success:null})\n                        }, 5000)\n                    })\n            }\n        }\n        else {\n            nameBook\n                .create(nameObject)\n                .then(response => {\n                        setPerson(persons.concat(response.data));\n                        setNewName('')\n                        setNewNumber('')\n                        setPopMessage(\n                            {content:`Added ${nameObject.name}`, success:true}\n                        )\n                        setTimeout(()=>{\n                            setPopMessage({content:'', success:null})\n                        }, 5000)\n                }\n\n                )\n                .catch(error =>{\n                    setPopMessage({content:`${error.message}`, success:false})\n                })\n                    setTimeout(()=>{\n                        setPopMessage({content:'', success:null})\n                    }, 5000)\n        }\n        // nameBook\n        //     .create(nameObject)\n        //     .then(response => {\n        //         setPerson(persons.concat(response.data));\n        //         setNewName('')\n        //         setNewNumber('')\n        //         }\n        //\n        //     );\n        // setPerson(persons.concat(nameObject));\n        // setNewName('')\n        // setNewNumber('')\n        // console.log(nameObject)\n\n\n    };\n\n    const handleShowPerson = (event) =>{\n        setShowPerson(event.target.value)\n    };\n\n\n    const handleNameChange = (event) =>{\n        const nameList = persons.map(a => a.name)\n        if (nameList.includes(event.target.value)) {\n            window.alert(event.target.value + 'is already added to phonebook!')\n        }\n        setNewName(event.target.value)\n    };\n\n    const handleNumberChange =(event) =>{\n        setNewNumber(event.target.value)\n    };\n\n    const handleDelete = (name,id) =>{\n        const person = persons.find(person => person.id ===id)\n        if(window.confirm(`delete ${name}`)){\n            nameBook\n                .deleteName(person.id)\n                .then(response =>{\n                    setPerson(persons.filter(person => person.id !== id))\n                })\n                .catch(error =>{\n                    setPopMessage(`${person.name} has already been removed from the server`, false)\n                    setTimeout(()=>{\n                        setPopMessage(null)\n                    }, 5000)\n                })\n\n        }\n\n    };\n\n    return(\n        <div>\n            <h2>Phone Book</h2>\n            <Notification message={popMessage}/>\n            <div>filter shown with <input value={showPerson} onChange={handleShowPerson}/></div>\n            {/*<Filter person={persons}/>*/}\n            {/*<div>*/}\n            {/*    {showList.map(c => <li>{c} {persons[personIndex].number}</li>)}*/}\n            {/*</div>*/}\n\n            <Search persons={persons} showPerson={showPerson}/>\n            <h3>Add a new</h3>\n            <form onSubmit={addName}>\n                <div>\n                    name: <input value = {newName} onChange={handleNameChange}/>\n                </div>\n                <div>\n                    number:<input value={newNumber} onChange={handleNumberChange}/>\n                </div>\n                <div>\n                    <button type={'submit'}>add</button>\n                </div>\n            </form>\n            <h2>Numbers</h2>\n            <Persons person={persons} handleDelete={handleDelete}/>\n        </div>\n    )\n};\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}